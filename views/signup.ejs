<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Account | mintoSpeed</title>
  <meta name="description" content="Signup in mintoSpeed">
  <meta name="keywords" content="signup">
  <meta name="author" content="mintoSpeed">

  <!-- fav icon -->
  <link rel="icon" type="image/png" href="/favicon/favicon-96x96.png" sizes="96x96" />
  <link rel="icon" type="image/svg+xml" href="/favicon/favicon.svg" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png" />
  <link rel="manifest" href="/favicon/site.webmanifest" />

  <!-- google font -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700;800&display=swap"
    rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Khula:wght@400;600;700;800&display=swap" rel="stylesheet" />
  <!--Font awesome icon-->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

  <!-- hash -->
  <script nonce="<%-nonce%>" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>


  <!-- Firebase JS SDK -->
  <script nonce="<%-nonce%>" src="https://www.gstatic.com/firebasejs/9.12.1/firebase-app-compat.js"></script>
  <script nonce="<%-nonce%>" src="https://www.gstatic.com/firebasejs/9.12.1/firebase-auth-compat.js"></script>

</head>

<body>
  <!-- alertboxAndLoader -->
  <%- include('partials/alertboxAndLoader') %>

    <section class="container">

      <div class="container2">
        <header>Create Account</header>
        <div class="logo"><span style=" font-size: 13px;">on</span>&nbsp;<a href="/">minto<span>Speed</span></a></div>

        <!--  -->
        <div class="formDiv">
          <div class="input-box">
            <label>Full Name</label>
            <input type="text" id="fullName" placeholder="Enter full name" required />
          </div>

          <div class="column" style="flex-wrap: nowrap;">
            <div class="input-box">
              <label>Email Address</label>
              <input type="email" id="email" placeholder="Enter Email Address" required />
            </div>

          </div>

          <div id="recaptcha-container"></div>
          <div class="column" style="flex-wrap: nowrap;">
            <div class="input-box">
              <label>Phone Number</label>
              <input type="tel" id="phone" placeholder="Enter phone number" required />
            </div>
            <div style="margin-top: 15px;">
              <button id="sendOtpBtn" class="verifyOtpBtn">Send OTP</button>
            </div>
          </div>

          <div class="column" id="otpSection" style="flex-wrap: nowrap; display: none;">
            <div class="input-box">
              <label>Verify OTP </label>
              <input type="text" id="phoneOtp" placeholder="Enter OTP" required />
            </div>
            <div style=" margin-top: 15px;">
              <button id="verifyOtpBtn" class="verifyOtpBtn">Verify OTP</button>
            </div>
          </div>

          <div class="column" style="flex-wrap: nowrap;">
            <div class="input-box">
              <label>Create Password</label>
              <input type="password" id="passwordInput" placeholder="Create password" />
            </div>
            <div>
              <p style="width: 30px; padding-top: 22px;" id="togglePassword" class="togBtn"
                style="background-color: transparent;"><i class="fa-solid fa-eye-slash"></i></p>
            </div>
          </div>

          <div class="input-box address">
            <label>Address</label>
            <input type="text" id="streetAddress" placeholder="Enter street address" required />
            <div class="column">
              <input type="text" id="city" placeholder="Enter your city" required />
              <input type="number" id="pincode" placeholder="Enter pincode" required />
            </div>

          </div>

          <button class="orderBtn" id="submitBtn">Submit</button>
          <p style="text-align: center; font-size: 14px; margin-top: 20px;">Already have an account? <a href="/auth/login"
              style="text-decoration: none;">Login</a></p>
          </formDiv>

        </div>
    </section>

    <script nonce="<%-nonce%>">
      document.addEventListener("DOMContentLoaded", () => {
        const passwordInput = document.getElementById("passwordInput");
        const togglePassword = document.getElementById("togglePassword");

        togglePassword.addEventListener("click", () => {
          const isPassword = passwordInput.getAttribute("type") === "password";
          passwordInput.setAttribute("type", isPassword ? "text" : "password");
          togglePassword.innerHTML = isPassword
            ? '<i class="fa-solid fa-eye"></i>' // Show password icon
            : '<i class="fa-solid fa-eye-slash"></i>'; // Hide password icon
        });


        const firebaseConfig = {
          apiKey: "AIzaSyDFgvcbxCbPKwSxkzdIBYe0CJGCeqhQO2Q",
          authDomain: "mintospeed-web.firebaseapp.com",
          projectId: "mintospeed-web",
          messagingSenderId: "494958498311",
          appId: "1:494958498311:web:da56215a676c72ec7390a2",
          measurementId: "G-G0671NCF1W"

        };

        // Initialize Firebase
        const app = firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        let user;
        let confirmationResult; // Store confirmationResult globally

        let recaptchaInitialized = false; // Track initialization state globally

        function initializeRecaptcha() {
          // Check if recaptchaVerifier is already initialized
          if (!recaptchaInitialized) {
            window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container', {
              size: 'invisible', // Use 'normal' for visible debugging
              callback: (response) => {
                console.log('Recaptcha solved:', response);
              },
              'expired-callback': () => {
                console.warn('Recaptcha expired. Please refresh the page or try again.');
              }
            });

            // Render the reCAPTCHA widget
            window.recaptchaVerifier.render().then((widgetId) => {
              console.log('Recaptcha widget ID:', widgetId);
              recaptchaInitialized = true; // Mark initialization as complete
            }).catch((error) => {
              console.error('Error rendering Recaptcha:', error.message);
              showAlert("Something went wrong with Recaptcha. Please refresh the page and try again.", "negative");
            });
          }
        }


        ////
        document.getElementById("sendOtpBtn").onclick = async function () {
          // Disable the button
          this.disabled = true;
          document.getElementById("sendOtpBtn").classList.add("disabled");
          let phoneNumber = document.getElementById("phone").value.trim();

          const phoneRegex = /^(\+91)?[6-9]\d{9}$/;
          if (!phoneRegex.test(phoneNumber)) {
            showAlert("Phone number is incorrect!", "negative");
            this.disabled = false;
            document.getElementById("sendOtpBtn").classList.remove("disabled");
            return;
          }

          if (!phoneNumber.startsWith('+91')) {
            phoneNumber = '+91' + phoneNumber;
          }

          try {
            // Reinitialize RecaptchaVerifier to ensure a fresh token
            initializeRecaptcha();
            let appVerifier = window.recaptchaVerifier;

            // Trigger phone number authentication
            const confirmationResult = await auth.signInWithPhoneNumber(phoneNumber, appVerifier);
            window.confirmationResult = confirmationResult;
            console.log("Button disabled state:", this.disabled);

            showAlert("OTP sent to your number.", "positive");
            document.getElementById("otpSection").style.display = "flex";
          } catch (error) {
            this.disabled = false;
            document.getElementById("sendOtpBtn").classList.remove("disabled");

            console.error('Error sending code:', error.message);
            showAlert("Something went wrong. Please try again.");
          }
        };

        document.getElementById("verifyOtpBtn").onclick = async function () {
          this.disabled = true;
          document.getElementById("verifyOtpBtn").classList.add("disabled");
          const otp = document.getElementById("phoneOtp").value.trim();
          if (otp.length < 6) {
            this.disabled = false;
            document.getElementById("verifyOtpBtn").classList.remove("disabled");
            showAlert("Invalid OTP. OTP should be 6 digit long.", "negative");
            return;
          }
          try {
            const result = await window.confirmationResult.confirm(otp);
            user = result.user;
            console.log("user : " + user);
            console.log("Button disabled state2:", this.disabled);

            document.getElementById("verifyOtpBtn").textContent = "Verified";
            document.getElementById("verifyOtpBtn").style.backgroundColor = "#001e00";
          } catch (error) {
            this.disabled = false;
            document.getElementById("verifyOtpBtn").classList.remove("disabled");

            console.error('Error verifying OTP:', error.message);
            // Check the error message or code to determine the specific issue
            if (error.code === 'auth/invalid-verification-code') {
              showAlert("Invalid OTP entered. Please check and try again.", "negative");
            } else if (error.code === 'auth/code-expired') {
              showAlert("The OTP has expired. Refresh page and try again.", "negative");
            } else {
              showAlert("Failed to verify OTP. Refresh page and try again.", "negative");
            }
          }
        };


        // ////
        document.getElementById("submitBtn").onclick = async function () {
          let isValid = true;

          const fullName = document.getElementById("fullName").value.trim();
          const email = document.getElementById("email").value.trim();
          const phone = document.getElementById("phone").value.trim();
          const password = document.getElementById("passwordInput").value;
          const streetAddress = document.getElementById("streetAddress").value.trim();
          const city = document.getElementById("city").value.trim();
          const pincode = document.getElementById("pincode").value.trim();

          let validateInput = (input) => typeof input === 'string' && /^[a-zA-Z0-9_\- &,.]+$/.test(input) && input.length > 3;
          let validateNumberInput = (input, length) => typeof input === 'string' && /^\d+$/.test(input) && input.length === length;
          let validateEmail = (input) => typeof input === 'string' && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input);


          // Full Name Validation
          if (!validateInput(fullName)) {
            showAlert("Full Name is required", "negative");
            document.getElementById("loader_container").style.display = "none";
            return isValid = false;
          }


          // Email Validation
          if (!validateEmail(email)) {
            showAlert("Please enter a valid email address", "negative");
            document.getElementById("loader_container").style.display = "none";
            return isValid = false;
          }

          if (password.trim() === "" || password.length < 6) {
            showAlert("Password cannot be empty and should be of 6 digit long.", "negative");
            document.getElementById("loader_container").style.display = "none";
            return isValid = false;
          }
          // Address Validation
          if (!validateInput(streetAddress)) {
            showAlert("Street address is required", "negative");
            document.getElementById("loader_container").style.display = "none";
            return isValid = false;
          }

          if (!validateInput(city)) {
            showAlert("City is required", "negative");
            document.getElementById("loader_container").style.display = "none";
            return isValid = false;
          }

          // Pincode Validation (6 digits)
          if (!validateNumberInput(pincode, 6)) {
            showAlert("Please enter a valid 6-digit pincode", "negative");
            document.getElementById("loader_container").style.display = "none";
            return isValid = false;
          }

          document.getElementById("loader_container").style.display = "flex";

          if (isValid) {
            console.log("user2 : " + user);
            if (user.phone && user.uid) {

              const hashedPassword = CryptoJS.SHA256(password).toString();
              console.log("Hashed Password:", hashedPassword);

              // Collect data from the formDiv
              const formData = {
                user, fullName, email, streetAddress, city, pincode, hashedPassword
              };
              console.log("formData : " + formData);


              // Send data to backend using fetch
              try {
                const response = await fetch('/auth/signup', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.type == "negative") {
                  showAlert(result.message, "negative");
                  document.getElementById("loader_container").style.display = "none";
                }
                else if (result.type == "positive") {
                  const redirectLink = sessionStorage.getItem('redirect_link');
                  if (redirectLink) {
                    console.log("redirectLink: " + redirectLink);
                    window.location.href = redirectLink; // Redirect to the saved link
                  } else {
                    window.location.href = '/profile';
                  }
                  return;
                }
              } catch (error) {
                console.error('Error:', error);
                document.getElementById("loader_container").style.display = "none";
                showAlert('An error occurred. Please refresh page and try again.', "negative");
                return;
              }

            }
            else {
              console.log("user : " + user);

              document.getElementById("loader_container").style.display = "none";
              showAlert('Please verify phone number by clicking on send OTP button.', "negative");
              return;
            }
          }
          else {
            document.getElementById("loader_container").style.display = "none";
            showAlert('You entered an invalid input.', "negative");
            return;
          }
        };
      });
    </script>

    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Open Sans', sans-serif;
        -webkit-tap-highlight-color: transparent;
      }

      body {
        background-color: rgb(243, 243, 243);
      }

      .disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }


      div.logo {
        margin: 5px;
        text-align: center;
      }

      div.logo>a {
        text-decoration: none;
        color: #0bb744;
        font-weight: 800;
        font-size: 15px;
      }

      div.logo>a span {
        color: rgb(19, 19, 19);
      }

      .container {
        position: fixed;
        width: 100%;
        height: 100vh;
        display: flex;
        justify-content: center;
        overflow: auto;
      }

      .container2 {
        max-width: 550px;
        width: 550px;
        height: fit-content;
        background: #fff;
        padding: 20px;
        margin: 10px;
        margin-bottom: 30px;
        border-radius: 8px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
      }

      .container2 header {
        font-size: 1.1rem;
        color: #424242;
        font-weight: 700;
        text-align: center;
        padding: 5px 10px 0 10px;
      }

      .container2 .formDiv {
        margin-top: 10px;
      }

      .formDiv .input-box {
        width: 100%;
        margin-top: 20px;
      }

      .input-box label {
        color: #333;
        font-size: 13px;
      }

      .formDiv :where(.input-box input, .select-box) {
        position: relative;
        height: 40px;
        width: 100%;
        outline: none;
        font-size: 13px;
        color: #6b6b6b;
        margin-top: 5px;
        border: 1px solid #ddd;
        border-radius: 6px;
        padding: 0 10px;
        background-color: #fafafa;
      }

      .input-box input:focus {
        box-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);
      }

      .formDiv .column {
        display: flex;
        column-gap: 15px;
      }

      .address :where(input, .select-box) {
        margin-top: 15px;
      }

      .select-box select {
        height: 100%;
        width: 100%;
        outline: none;
        border: none;
        color: #525252;
        font-size: .9rem;
        background-color: #f6f6f6;

      }

      .orderBtn,
      .verifyOtpBtn,
      .timer,
      .togBtn {
        height: 51px;
        width: 100%;
        color: #fff;
        font-size: .9rem;
        font-weight: 400;
        margin-top: 35px;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
        background: rgb(77, 215, 67);
      }

      .togBtn {
        background-color: transparent;
        color: black;
      }

      .verifyOtpBtn,
      .timer {
        margin-top: 32px;
        height: 38px;
        width: 100px;
      }

      .timer {
        background-color: transparent;
        color: black;
        border: none;
      }

      .formDiv button:hover {
        background: rgb(19, 172, 40);
      }

      .hidden {
        display: none !important;
      }

      .visible {
        display: block;
      }

      .visible-flex {
        display: flex !important;
      }

      /*Responsive*/
      @media screen and (max-width: 400px) {
        .formDiv .column {
          flex-wrap: wrap;
        }

        .container2 {
          padding: 20px 15px;
        }
      }
    </style>
</body>

</html>