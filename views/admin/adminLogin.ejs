<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Login - Grocery Services</title>
  <!-- google font -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700;800&display=swap"
    rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Khula:wght@400;600;700;800&display=swap" rel="stylesheet" />
  <!--Font awesome icon-->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

  <script nonce="<%-nonce%>" src="https://kit.fontawesome.com/6ac775d87f.js" crossorigin="anonymous"></script>


  <style>
    * {
      user-select: none;
      box-sizing: border-box;
      scroll-behavior: smooth;
      font-family: 'Open Sans', sans-serif;
    }

    body {
      position: relative;
      padding: 0;
      margin: 0;
      background-color: rgb(243, 243, 243);
    }

    ul {
      list-style: none;
      padding-left: 0;
    }

    a {
      text-decoration: none;
      color: black;
    }

    h1,
    h2,
    h3,
    h4 {
      text-transform: capitalize;
    }

    .flex {
      display: flex;
    }

    .align-center {
      align-items: center;
    }

    .justify-center {
      justify-content: center;
    }

    .justify-around {
      justify-content: space-around;
    }

    .justify-between {
      justify-content: space-between;
    }
  </style>
</head>

<body>

  <div class="container">
    <div class="login form">
      <!-- <header>Enter Access Code</header>
        <input type="password" id="passwordInput" placeholder="Enter access code..">
        <input type="button" class="button" id="otpBtn" value="Send OTP">

        <input type="number" id="otpInput" placeholder="Enter OTP..">
        <input type="button" class="button" id="loginBtn" value="Login"> -->
      <form id="loginForm">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required>

        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>

        <button type="submit">Login</button>
        <div id="response" style="margin-top: 20px;"></div>

      </form>
    </div>

  </div>

  <script nonce="<%-nonce%>">
     function sanitizeInput(input) {
      const element = document.createElement('div');
      element.innerText = input;
      return element.innerHTML;
    }

    const loginForm = document.getElementById('loginForm');
    const responseDiv = document.getElementById('response');

    loginForm.addEventListener('submit', async (event) => {
      event.preventDefault(); // Prevent form submission

      // Get form data
      const username1 = document.getElementById('username').value;
      const password1 = document.getElementById('password').value;
      const password = sanitizeInput(password1);
      const username = sanitizeInput(username1);


      try {
        // Send login request to backend
        const response = await fetch('/admin983/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ username, password }),
        });

        const result = await response.json();

        if (result.type == "positive") {
          responseDiv.innerHTML = `<p style="color: green;">${result.message || 'Login successful.'}</p>`;

          setTimeout(() => {
            window.location.href = '/dashboard';
          }, 2000);

        } else if (result.type == "negative") {
          responseDiv.innerHTML = `<p style="color: red;">${result.message || 'Login error.'}</p>`;

        } else {
          responseDiv.innerHTML = `<p style="color: red;">${result.message || 'Login failed.'}</p>`;
        }
      } catch (error) {
        responseDiv.innerHTML = `<p style="color: red;">An error occurred: ${error.message}</p>`;
      }
    });

  </script>

  <style>
    #loginBtn,
    #otpInput {
      display: none;
    }

    body {
      min-height: 100vh;
      width: 100%;
      background: #e4f0e7;
    }

    .container {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      max-width: 430px;
      width: 100%;
      background: #fff;
      border-radius: 7px;
      box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
    }

    .container .form {
      padding: 30px 20px;
    }

    header {
      font-size: 21px;
      font-weight: 700;
      text-align: center;
      margin-bottom: 40px;
    }

    input {
      height: 50px;
      width: 100%;
      padding: 0 10px;
      font-size: 16px;
      margin-bottom: 1.3rem;
      border: 1px solid #ddd;
      border-radius: 6px;
      outline: none;
    }

    input:focus {
      box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2);
    }

    input.button {
      color: #fff;
      background: #10c81d;
      font-size: 15px;
      font-weight: 600;
      letter-spacing: 1px;
      margin-top: 1.5rem;
      cursor: pointer;
      transition: 0.4s;
    }

    input.button:hover {
      background: #006607;
    }
  </style>

  <!-- <script nonce="<%-nonce%>">
  document.addEventListener('DOMContentLoaded', function () {

    function sanitizeInput(input) {
      const element = document.createElement('div');
      element.innerText = input;
      return element.innerHTML;
    }

    document.getElementById('otpBtn').addEventListener('click', () => {
      const rawPassword = document.getElementById('passwordInput').value;
      const sanitizedPassword = sanitizeInput(rawPassword);

      // const passwordRegex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
      // if (!passwordRegex.test(sanitizedPassword)) {
      //   alert('Invalid password. Make sure it meets the requirements.');
      //   return;
      // }

      // Send password securely
      fetch('/admin/itsme/sendOtp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(sanitizedPassword)
      })
        .then(response => response.json())
        .then(response => {
          showAlert(response.message, response.type);

          if (response.type == "positive") {
            if (email && email != null) {
              document.getElementById('email').value = '';
            }
            document.getElementById('comments').value = '';
            document.getElementById("loader_container").style.display = "none";

          } else {
            document.getElementById("loader_container").style.display = "none";
          }
        })
        .catch(error => {
          console.error('Error submitting complaint:', error);
          showAlert('Failed to submit complaint. Please try again.', 'negative');
          document.getElementById("loader_container").style.display = "none";
        });    
    });


    // Validate and submit feedback
    function handleSubmit(event) {
      event.preventDefault();

      let email = document.getElementById('email');
      const feedbackText = document.getElementById('comments').value.trim();

      if (email) {
        email = email.value.trim();
        if (!/\S+@\S+\.\S+/.test(email)) {
          return showAlert('Please enter a valid email.', 'negative');
        }
        email = email.toLowerCase();
      }
      else {
        email = null;
      }


      if (!feedbackText) {
        return showAlert('Please write your feedback.', 'negative');
      }
      if (/[#\[\]<>]/.test(feedbackText) || feedbackText.length < 1) {
        return showAlert('Blank or Input contains harmful characters like #, [, ], < or >.', 'negative');
      }
      if (feedbackText.length > 5000) {
        return showAlert('Please write complaint within 5000 characters..', 'negative');
      }

      const radioOptions = document.getElementsByName("complaint");
      let selectedOption = "";

      for (const option of radioOptions) {
        if (option.checked) {
          selectedOption = option.value;
          break;
        }
      }

      if (!selectedOption) {
        showAlert("Please select a reason for your complaint.", 'negative');
        return;
      }
      selectedOption = sanitizeInput(selectedOption);
      selectedOption = selectedOption.toLowerCase();


      // Sanitization function to remove potentially harmful characters
      function sanitizeInput(input) {
        return input.replace(/[<>\/\\'"]/g, "").trim(); // Remove < > / \ ' "
      }



      // Data to send
      const data = {
        email: email,
        selectedOption: selectedOption,
        feedback: feedbackText
      };

      // Sending data to the backend
      document.getElementById("loader_container").style.display = "flex";

      fetch('/complaint/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
        .then(response => response.json())
        .then(response => {
          showAlert(response.message, response.type);

          if (response.type == "positive") {
            if (email && email != null) {
              document.getElementById('email').value = '';
            }
            document.getElementById('comments').value = '';
            document.getElementById("loader_container").style.display = "none";

          } else {
            document.getElementById("loader_container").style.display = "none";
          }
        })
        .catch(error => {
          console.error('Error submitting complaint:', error);
          showAlert('Failed to submit complaint. Please try again.', 'negative');
          document.getElementById("loader_container").style.display = "none";
        });

    }
  });
</script> -->
</body>

</html>