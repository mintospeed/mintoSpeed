<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Item - Admin | mintoSpeed</title>
  <!-- google font -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700;800&display=swap"
    rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Khula:wght@400;600;700;800&display=swap" rel="stylesheet" />
  <!-- google icon -->
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,700,0,0" />
  <!--Font awesome icon-->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

  <script nonce="<%-nonce%>" src="https://kit.fontawesome.com/6ac775d87f.js" crossorigin="anonymous"></script>
  <!-- jQuery -->
  <script nonce="<%-nonce%>" src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>

</head>

<body>

  <!-- alertboxAndLoader -->
  <%- include('../partials/alertboxAndLoader') %>

    <section class="container">
      <div class="container2">
        <header>Add Item to Database</header>
        <form action="#" class="form" id="itemForm" enctype="multipart/form-data">
          <!-- Category Dropdown or Add New -->
          <div class="input-box">
            <label>Category</label>
            <select id="categorySelect">
              <option hidden>Select Category</option>
              <option value="new">Add New Category</option>
            </select>
            <input type="text" id="newCategory" placeholder="Enter new category" style="display: none;" />
          </div>

          <!-- Subcategory Dropdown or Add New -->
          <div class="input-box">
            <label>Subcategory</label>
            <select id="subcategorySelect">
              <option hidden>Select Subcategory</option>
              <option value="new">Add New Subcategory</option>
            </select>
            <input type="text" id="newSubcategory" placeholder="Enter new subcategory" style="display: none;" />
          </div>

          <!-- Item Name -->
          <div class="input-box">
            <label>Item Name</label>
            <input type="text" id="itemName" placeholder="Enter item name" required />
          </div>

          <!-- Image Upload -->
          <div class="input-box">
            <label>Upload Item Image</label>
            <input type="file" id="itemImage" accept="image/*" />
          </div>

          <!-- Packed Status -->
          <div class="input-box">
            <label>Packed</label>
            <select id="packedSelect">
              <option hidden>Select Packed Status</option>
              <option value="true">True</option>
              <option value="false">False</option>
            </select>
          </div>

          <!-- Item Quantity Details -->
          <div class="column">
            <div class="input-box">
              <label>Minimum Quantity</label>
              <input type="text" id="minQty" placeholder="Enter minimum quantity" required />
            </div>
            <div class="input-box">
              <label>Maximum Quantity</label>
              <input type="text" id="maxQty" placeholder="Enter maximum quantity" required />
            </div>
          </div>

          <div class="column">
            <div class="input-box">
              <label>Popular Quantity</label>
              <input type="text" id="popularQty" placeholder="Enter popular quantity" required />
            </div>
            <div class="input-box">
              <label>Price for Popular Quantity</label>
              <input type="number" id="popularPrice" placeholder="Enter price" required />
            </div>
          </div>


          <!-- Dynamic Weight and Price Combinations for Unpacked Items -->
          <div id="weightPriceOptions" style="display: none; background-color: whitesmoke; padding: 10px 7px;" >
            <p class="weightPriceOptionsh4">Weight/Price Combinations</p>
            <div id="weightPriceContainer">
              <div class="weight-price-row">
                <input type="text" class="weightInput" placeholder="Weight" required />
                <input type="number" class="priceInput" placeholder="Price for Weight" required />
              </div>
            </div>
            <button type="button" class="addPackedListBtn">New Row</button>
          </div>

          <div class="input-box">
            <label>About Item or Description(optional)</label>
            <textarea id="itemAbout" placeholder="Give detail info about item that customer can read.."></textarea>
          </div>

          <!-- Submit Button -->
          <button type="submit" class="submitBtn">Submit</button>
        </form>
      </div>
    </section>


    <script nonce="<%-nonce%>">
      let isError = false;
      document.addEventListener("DOMContentLoaded", function () {
        // Add event listeners to handle changes and validation
        document.getElementById("categorySelect").addEventListener("change", toggleNewCategory);
        document.getElementById("subcategorySelect").addEventListener("change", toggleNewSubcategory);
        document.getElementById("packedSelect").addEventListener("change", togglePacked);
        document.querySelector(".submitBtn").addEventListener("click", handleSubmit);
        document.querySelector(".addPackedListBtn").addEventListener("click", addWeightPriceCombination);

        document.getElementById("itemName").addEventListener("input", (event) => validateText(event.target));
        document.getElementById("newCategory").addEventListener("input", (event) => validateText(event.target));
        document.getElementById("newSubcategory").addEventListener("input", (event) => validateText(event.target));
        document.getElementById("popularPrice").addEventListener("input", (event) => validatePrice(event.target));

        function validateText(input) {
          console.log("err 13.4");
          if (input && input.value !== undefined || input.value.length < 1) {
            showAlert("Blank input.", "negative");
            input.style.border = "1px solid red";
            isError = true;
            return null; // Indicate invalid input
          }

          input.style.border = "1px solid #ddd";
          isError = false;
          return input;
        }

        // Sanitize input to prevent XSS
        function sanitizeInput(inputElement) {
          console.log("err 13.3");
          if (inputElement == null) {
            return null;
          }
          const input = inputElement.value.trim();
          if (input.length < 1) {
            showAlert("Blank input.", "negative");
            inputElement.style.border = "1px solid red";
            isError = true;
            return null; // Indicate invalid input
          }

          inputElement.style.border = "1px solid #ddd";
          isError = false;
          return input;
        }



        // Validation for quantity (packed vs unpacked)
        function validateQuantity(input, flag) {
          console.log("err 13.2");
          const quantityPattern = /^\d+\s(gm|kg)$/;
          let val;

          if (flag === true) {
            val = input.value.trim();
            if (!quantityPattern.test(val)) {
              isError = true;
              showAlert("Please enter a valid quantity.", "negative");
              input.style.border = "1px solid red";
              return null;
            } else {
              isError = false;
              input.style.border = "1px solid #ddd";
              return input;
            }

          } else if (flag === false) {
            val = input.trim();
            if (!quantityPattern.test(val)) {
              isError = true;
              showAlert("Please enter a valid quantity.", "negative");
              input.style.border = "1px solid red";
              return null;
            } else {
              isError = false;
              input.style.border = "1px solid #ddd";
              return input;
            }
          }
        }

        // Validation for price inputs
        function validatePrice(input) {
          console.log("er 13.0");
          // Ensure input is defined and has a value property
          if (input && input.value !== undefined) {
            console.log("er 13");
            const value = input.value.trim();
            if (isNaN(value) || value < 1) {
              isError = true;
              input.style.border = "1px solid red";
              showAlert("Please enter a valid positive price.", "negative");
              return null;
            }
            input.style.border = "1px solid #ddd";
            isError = false;
            return input;
          }
        }

        // Toggle visibility for new category input
        function toggleNewCategory() {
          console.log("er 1");
          const categorySelect = sanitizeInput(document.getElementById("categorySelect"));
          const newCategoryInput = document.getElementById("newCategory");
          newCategoryInput.style.display = categorySelect === "new" ? "block" : "none";
        }
        console.log("er 2");

        // Toggle visibility for new subcategory input
        function toggleNewSubcategory() {
          console.log("er 3");
          const subcategorySelect = sanitizeInput(document.getElementById("subcategorySelect"));
          const newSubcategoryInput = document.getElementById("newSubcategory");
          newSubcategoryInput.style.display = subcategorySelect === "new" ? "block" : "none";
        }
        console.log("er 4");

        function validatePriceInput(event) {
          validatePrice(event.target);
        }

        function validateQuantityInput(event) {
          validateQuantity(event.target, true);
        }

        function togglePacked() {
          console.log("er 5");
          let weightInputs = document.getElementsByClassName("weightInput");
          let priceInputs = document.getElementsByClassName("priceInput");
          const packedSelect = document.getElementById("packedSelect").value.trim();
          const weightPriceOptions = document.getElementById("weightPriceOptions");
          weightPriceOptions.style.display = packedSelect === "false" ? "block" : "none";
          document.getElementById("minQty").value = "";
          document.getElementById("maxQty").value = "";
          document.getElementById("popularQty").value = "";
          document.getElementById("weightPriceContainer").innerHTML = `
                                <div class="weight-price-row">
                <input type="text" class="weightInput" placeholder="Weight" required />
                <input type="number" class="priceInput" placeholder="Price for Weight" required />
              </div>`;
              
          if (packedSelect === "true") {
            document.getElementById("minQty").removeEventListener("input", validateQuantityInput);
            document.getElementById("maxQty").removeEventListener("input", validateQuantityInput);
            document.getElementById("popularQty").removeEventListener("input", validateQuantityInput);

            document.getElementById("minQty").type = "number";
            document.getElementById("maxQty").type = "number";
            document.getElementById("popularQty").type = "number";

            document.getElementById("minQty").addEventListener("input", validatePriceInput);
            document.getElementById("maxQty").addEventListener("input", validatePriceInput);
            document.getElementById("popularQty").addEventListener("input", validatePriceInput);
          } else {
            document.getElementById("minQty").removeEventListener("input", validatePriceInput);
            document.getElementById("maxQty").removeEventListener("input", validatePriceInput);
            document.getElementById("popularQty").removeEventListener("input", validatePriceInput);

            document.getElementById("minQty").type = "text";
            document.getElementById("maxQty").type = "text";
            document.getElementById("popularQty").type = "text";

            document.getElementById("minQty").addEventListener("input", validateQuantityInput);
            document.getElementById("maxQty").addEventListener("input", validateQuantityInput);
            document.getElementById("popularQty").addEventListener("input", validateQuantityInput);

            Array.from(weightInputs).forEach((input) => {
              input.addEventListener("input", validateQuantityInput);
            });
            Array.from(priceInputs).forEach((input) => {
              input.addEventListener("input", validatePriceInput);
            });
          }
        }
        console.log("er 6");


        // Add dynamic weight/price combination rows
        function addWeightPriceCombination() {
          console.log("er 7");

          const container = document.getElementById("weightPriceContainer");
          const newRow = document.createElement("div");
          newRow.classList.add("weight-price-row");
          newRow.innerHTML = `
          <input type="text" class="weightInput" placeholder="Weight" required oninput="validateText(this)" />
          <input type="number" class="priceInput" step="0.01" placeholder="Price for Weight" required oninput="validatePrice(this)" />
        `;
          container.appendChild(newRow);
        }
        console.log("er 8");


        // Handle form submission
        function handleSubmit(event) {
          event.preventDefault();

          let itemName = sanitizeInput(validateText(document.getElementById("itemName")));
          let category = sanitizeInput(validateText(document.getElementById("categorySelect")));
          let subcategory = sanitizeInput(validateText(document.getElementById("subcategorySelect")));
          let minQty;
          let maxQty;
          let popularQty;
          let popularPrice = sanitizeInput(validatePrice(document.getElementById("popularPrice")));
          let packed = sanitizeInput(document.getElementById("packedSelect"));
          let itemAbout = document.getElementById("itemAbout").value.trim();
          

          if (category == "new") {
            category = sanitizeInput(validateText(document.getElementById("newCategory")));
          }
          if (subcategory == "new") {
            subcategory = sanitizeInput(validateText(document.getElementById("newSubcategory")));
          }

          console.log("submit1 : " + itemName + category + subcategory + popularPrice + packed);

          // Additional weight/price combinations for unpacked items
          let weightPriceCombinations = [];
          if (packed === "false") {
            minQty = sanitizeInput(validateQuantity(document.getElementById("minQty"), true));
            maxQty = sanitizeInput(validateQuantity(document.getElementById("maxQty"), true));
            popularQty = sanitizeInput(validateQuantity(document.getElementById("popularQty"), true));
            document.querySelectorAll(".weight-price-row").forEach((row) => {
              let weight = sanitizeInput(validateQuantity(row.querySelector(".weightInput"), true));
              let price = sanitizeInput(validatePrice(row.querySelector(".priceInput")));
              console.log("submit2 : " + minQty + maxQty + popularQty + weight + price);
              if (weight != null && price != null) {
                weightPriceCombinations.push({ weight, price });
              }
              else {
                showAlert("Combined weight or price contain null .", "negative");
              }
            });
          }
          else {
            minQty = sanitizeInput(validatePrice(document.getElementById("minQty")));
            maxQty = sanitizeInput(validatePrice(document.getElementById("maxQty")));
            popularQty = sanitizeInput(validatePrice(document.getElementById("popularQty")));
          }
          console.log("submit3 : " + minQty + maxQty + popularQty);


          // Handle file upload
          const fileInput = document.getElementById("itemImage");
          const file = fileInput.files[0];

          if (itemName != null && category != null && subcategory != null && minQty != null && maxQty != null && popularPrice != null && popularQty != null && packed != null) {
            document.getElementById("loader_container").style.display = "flex";

            const formData = new FormData();
            formData.append("itemName", itemName);
            formData.append("category", category);
            formData.append("subcategory", subcategory);
            formData.append("minQty", minQty);
            formData.append("maxQty", maxQty);
            formData.append("popularQty", popularQty);
            formData.append("popularPrice", popularPrice);
            formData.append("packed", packed === "true");
            formData.append("weightPriceCombinations", JSON.stringify(weightPriceCombinations)); // Send as JSON string
            formData.append("itemImage", file); // Image file
            formData.append("itemAbout", itemAbout); // Image file

            // Send the form data to the backend
            fetch('/dashboard/addItem/add-item', {
              method: 'POST',
              body: formData
            })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  showAlert("Item added successfully!", "positive");
                  document.getElementById("itemForm").reset(); // Reset the form
                  document.getElementById("weightPriceContainer").innerHTML = `
                                <div class="weight-price-row">
                <input type="text" class="weightInput" placeholder="Weight" required />
                <input type="number" class="priceInput" placeholder="Price for Weight" required />
              </div>`;
                  document.getElementById("loader_container").style.display = "none";
                } else {
                  console.error("Error adding item:", data.message);
                  showAlert("Error in adding item.", "negative");
                  document.getElementById("loader_container").style.display = "none";
                }
              })
              .catch(error => {
                console.error("Error adding item:", error);
                showAlert("Error in adding item..", "negative");
                document.getElementById("loader_container").style.display = "none";
              });
          }
          else {
            showAlert("Some of the input values are blank.", "negative");
            document.getElementById("loader_container").style.display = "none";
          }
        }



        console.log("er 16");

        function populateCategories() {
          console.log("er 24");

          const categorySelect = document.getElementById("categorySelect");
          document.getElementById("loader_container").style.display = "flex";

          fetch('/dashboard/addItem/get-categories', {
            method: 'POST'
          })
            .then(response => {
              if (!response.ok) {
                console.log("er 25");
                showAlert("Category not fetched.", "negative");
                document.getElementById("loader_container").style.display = "none";
                return;
              }
              return response.json();
            })
            .then(categories => {
              console.log("er 26");
              categories.forEach(category => {
                const categoryOption = document.createElement("option");
                categoryOption.value = category;
                console.log("category : " + category);
                categoryOption.textContent = category;
                categorySelect.appendChild(categoryOption);
              });
              document.getElementById("loader_container").style.display = "none";
            })
            .catch(error => {
              showAlert("Error fetching categories.", "negative");
              console.error("Error fetching categories:", error);
              document.getElementById("loader_container").style.display = "none";
            });
        }


        function populateSubcategories(category) {
          console.log("er 17");

          const subcategorySelect = document.getElementById("subcategorySelect");
          subcategorySelect.innerHTML = '<option hidden>Select Subcategory</option><option value="new">Add New Subcategory</option>';
          console.log("er 18");
          document.getElementById("loader_container").style.display = "flex";

          fetch('/dashboard/addItem/get-subcategories', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ category: category })
          })
            .then(response => response.json())
            .then(subcategories => {
              console.log("er 19");
              subcategories.forEach(subcategory => {
                const subcatOption = document.createElement("option");
                subcatOption.value = subcategory;
                subcatOption.textContent = subcategory;
                subcategorySelect.appendChild(subcatOption);
              });
              document.getElementById("loader_container").style.display = "none";
            })
            .catch(error => {
              showAlert("Error fetching sub-categories.", "negative");
              console.error("Error fetching sub-categories:", error);
              document.getElementById("loader_container").style.display = "none";
            });
        }
        console.log("er 20");

        // Initialize categories on page load
        window.onload = () => {
          console.log("er 21");
          populateCategories();
        };

        // Populate subcategories when category changes
        document.getElementById("categorySelect").addEventListener("change", function () {
          console.log("er 22");
          const selectedCategory = this.value.trim();
          if (selectedCategory !== "new") {
            populateSubcategories(selectedCategory);
          }
        });
      });

    </script>

    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Open Sans', sans-serif;
        -webkit-tap-highlight-color: transparent;
      }

      body {
        background-color: rgb(243, 243, 243);
      }


      .container {
        position: fixed;
        width: 100%;
        height: 100vh;
        overflow-y: auto;
        display: flex;
        justify-content: center;
      }

      .container2 {
        position: relative;
        max-width: 650px;
        width: 650px;
        height: fit-content;
        background: #fff;
        padding: 20px;
        margin: 10px 10px;
        border-radius: 8px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
      }

      .container2 header {
        font-size: 1.1rem;
        color: #5a5a5a;
        font-weight: 700;
        text-align: center;
        padding: 10px 10px;
      }

      textarea{
        width: 100%;
    margin-top: 7px;
    padding: 5px;
      }

      .container2 .form {
        margin-top: 20px;
      }

      #weightPriceOptions{
        margin-top: 7px;
      }

      .form .input-box,
      .weightPriceOptionsh4 {
        width: 100%;
        margin-top: 20px;
      }
      .weightPriceOptionsh4{
        margin-top: 5px;
      }

      .input-box label,
      .weightPriceOptionsh4 {
        color: #333;
        font-size: 0.9rem;
      }

      .form :where(.input-box input, .select-box, .input-box select, .weight-price-row input) {
        position: relative;
        height: 40px;
        width: 100%;
        outline: none;
        font-size: 0.9rem;
        color: #707070;
        margin-top: 8px;
        border: 1px solid #ddd;
        border-radius: 6px;
        padding: 0 10px;
      }

      .input-box input:focus {
        box-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);
      }

      .form .column {
        display: flex;
        column-gap: 15px;
      }

      .submitBtn,
      .addPackedListBtn {
        height: 45px;
        width: 100%;
        color: #fff;
        font-size: 1rem;
        font-weight: 400;
        margin-top: 30px;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
        background: rgb(91, 216, 114);
      }

      .addPackedListBtn {
        height: 35px;
        width: 150px;
        margin-top: 10px;
      }

      .form button:hover {
        background: rgb(17, 177, 79);
      }

      /* Dynamic weight/price rows */
      .weight-price-row {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
      }

      .weightPriceOptions {
        padding: 10px;
      }


      /* Responsive */
      @media screen and (max-width: 400px) {
        .form .column {
          flex-wrap: wrap;
        }

        .container2 {
          padding: 10px;
          margin: 2px;
        }
      }
    </style>
</body>

</html>