<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Delete Item - Admin | mintoSpeed</title>
  <!-- google font -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700;800&display=swap"
    rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Khula:wght@400;600;700;800&display=swap" rel="stylesheet" />
  <!-- google icon -->
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,700,0,0" />
  <!--Font awesome icon-->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

  <script nonce="<%-nonce%>" src="https://kit.fontawesome.com/6ac775d87f.js" crossorigin="anonymous"></script>
  <!-- jQuery -->
  <script nonce="<%-nonce%>" src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>

</head>

<body>

  <!-- alertboxAndLoader -->
  <%- include('../partials/alertboxAndLoader') %>

  <section class="container">
    <div class="container2">
        <header>Delete an Item</header>
        <form action="#" class="form" id="itemForm" enctype="multipart/form-data">
          <!-- Category Dropdown or Add New -->
          <div class="input-box">
            <label>Category</label>
            <select id="categorySelect">
              <option hidden>Select Category</option>
            </select>
          </div>
  
          <!-- Subcategory Dropdown or Add New -->
          <div class="input-box">
            <label>Subcategory</label>
            <select id="subcategorySelect">
              <option hidden>Select Subcategory</option>
            </select>
          </div>
  
          <!-- Subcategory Dropdown or Add New -->
          <div class="input-box">
              <label>Item Name</label>
              <select id="itemSelect">
                <option hidden>Select Item</option>
              </select>
            </div>
  
          <!-- Submit Button -->
          <button type="submit" class="submitBtn">Delete Item</button>
        </form>
      </div>
  </section>


    <script nonce="<%-nonce%>">
      let isError = false;
      document.addEventListener("DOMContentLoaded", function () {
        // Add event listeners to handle changes and validation
        document.querySelector(".submitBtn").addEventListener("click", handleSubmit);
       
        function validateText(input) {
          console.log("err 13.4");
          if (input && input.value !== undefined && /[.#\[\]$<>\/]/.test(input.value) || input.value.length < 1) {
            showAlert("Blank or Input contains harmful characters like ., #, $, [, ], < or >. Please remove them.", "negative");
            input.style.border = "1px solid red";
            isError = true;
            return null; // Indicate invalid input
          }

          input.style.border = "1px solid #ddd";
          isError = false;
          return input;
        }

        // Sanitize input to prevent XSS
        function sanitizeInput(inputElement) {
          console.log("err 13.3");
          if(inputElement == null){
            return null;
          }
          const input = inputElement.value.trim();
          if (/[.#\[\]$<>\/]/.test(input) || input.length < 1) {
            showAlert("Blank or Input contains harmful characters like ., #, $, [, ], < or >. Please remove them.", "negative");
            inputElement.style.border = "1px solid red";
            isError = true;
            return null; // Indicate invalid input
          }

          inputElement.style.border = "1px solid #ddd";
          isError = false;
          return input;
        }


        // Handle form submission
        function handleSubmit(event) {
          event.preventDefault();

          let itemName = sanitizeInput(validateText(document.getElementById("itemSelect")));
          let category = sanitizeInput(validateText(document.getElementById("categorySelect")));
          let subcategory = sanitizeInput(validateText(document.getElementById("subcategorySelect")));
         
          console.log("submit1 : " + itemName + category + subcategory);

          if (itemName != null && category != null && subcategory != null) {

            // Send the form data to the backend
            fetch('/dashboard/deleteItem/delete-item', {
              method: 'POST',
              headers: {
              'Content-Type': 'application/json'
              },
              body: JSON.stringify({ category: category, subcategory: subcategory, itemName: itemName })
            })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  showAlert("Item deleted successfully!", "positive");
                  document.getElementById("itemForm").reset(); // Reset the form
                } else {
                  console.error("Error delete item:", data.message);
                  showAlert("Error in delete item." + data.message, "negative");
                }
              })
              .catch(error => {
                console.error("Error delete item:", error);
                showAlert("Error in delete item..", "negative");
              });
          }
          else {
            showAlert("Something went wrong to submit the form.", "negative");
          }
        }



        console.log("er 16");

        function populateCategories() {
          console.log("er 24");

          const categorySelect = document.getElementById("categorySelect");

          fetch('/dashboard/modifyItem/get-categories', {
              method: 'POST'
            })
            .then(response => {
              if (!response.ok) {
                console.log("er 25");
                showAlert("Category not fetched.", "negative");
                return;
              }
              return response.json();
            })
            .then(categories => {
              console.log("er 26");
              categories.forEach(category => {
                const categoryOption = document.createElement("option");
                categoryOption.value = category;
                console.log("category : " + category);
                categoryOption.textContent = category;
                categorySelect.appendChild(categoryOption);
              });
            })
            .catch(error => {
              showAlert("Error fetching categories.", "negative");
              console.error("Error fetching categories:", error);
            });
        }


        function populateSubcategories(category) {

          const subcategorySelect = document.getElementById("subcategorySelect");
          console.log("er 18");

          fetch('/dashboard/modifyItem/get-subcategories', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ category: category })
          })
            .then(response => response.json())
            .then(subcategories => {
              console.log("er 19");
              subcategories.forEach(subcategory => {
                const subcatOption = document.createElement("option");
                subcatOption.value = subcategory;
                subcatOption.textContent = subcategory;
                subcategorySelect.appendChild(subcatOption);
              });
            })
            .catch(error => {
              showAlert("Error fetching sub-categories.", "negative");
              console.error("Error fetching sub-categories:", error);
            });
        }
        console.log("er 20");

        // Initialize categories on page load
        window.onload = () => {
          console.log("er 21");
          populateCategories();
        };

        // Populate subcategories when category changes
        document.getElementById("categorySelect").addEventListener("change", function () {
          console.log("er 22");
          const selectedCategory = this.value.trim();
          if (selectedCategory !== "new") {
            populateSubcategories(selectedCategory);
          }
        });

        // Populate items when subcategory changes
        document.getElementById("subcategorySelect").addEventListener("change", function () {
          console.log("er 25.3");
          const selectedCategory = document.getElementById("categorySelect").value.trim();
          const selectedSubCategory = this.value.trim();
          populateItem(selectedCategory, selectedSubCategory);
        });

        //item select
        function populateItem(category, subcategory) {
          console.log("er 25.001");

          const itemSelect = document.getElementById("itemSelect");

          fetch('/dashboard/modifyItem/get-items', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ category: category, subcategory: subcategory })
          })
            .then(response => response.json())
            .then(items => {
              console.log("er 25.0");
              items.forEach(item => {
                const subcatOption = document.createElement("option");
                subcatOption.value = item;
                subcatOption.textContent = item;
                itemSelect.appendChild(subcatOption);
              });
            })
            .catch(error => {
              showAlert("Error fetching items.", "negative");
              console.error("Error fetching items:", error);
            });
        }
        console.log("er 25");

      });

    </script>

<style>
  * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Open Sans', sans-serif;
    }

    body {
      background-color: rgb(243, 243, 243);
    }

    
    .container{
      position: fixed;
      width: 100%;
      height: 100vh;
      padding: 40px 0;
      overflow-y: auto;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .container2 {
      position: relative;
      max-width: 650px;
      width: 650px;
      height: fit-content;
      background: #fff;
      padding: 20px;
      margin: 10px 10px;
      border-radius: 8px;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    }

    .container2 header {
      font-size: 1.1rem;
      color: #5a5a5a;
      font-weight: 700;
      text-align: center;
      padding: 20px 10px;
    }


  .container2 .form {
    margin-top: 20px;
  }

  .form .input-box,
  .weightPriceOptionsh4 {
    width: 100%;
    margin-top: 20px;
  }

  .input-box label,
  .weightPriceOptionsh4 {
    color: #333;
    font-size: 0.9rem;
  }

  .form :where(.input-box input, .select-box, .input-box select, .weight-price-row input) {
    position: relative;
    height: 40px;
    width: 100%;
    outline: none;
    font-size: 0.9rem;
    color: #707070;
    margin-top: 8px;
    border: 1px solid #ddd;
    border-radius: 6px;
    padding: 0 10px;
  }

  .input-box input:focus {
    box-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);
  }

  .form .column {
    display: flex;
    column-gap: 15px;
  }

  .submitBtn,
  .addPackedListBtn {
    height: 45px;
    width: 100%;
    color: #fff;
    font-size: 1rem;
    font-weight: 400;
    margin-top: 30px;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
    background: rgb(233, 56, 56);
  }

  .addPackedListBtn {
    height: 35px;
    width: 150px;
    margin-top: 10px;
  }

  .form button:hover {
    background: rgb(223, 13, 13);
  }

  /* Dynamic weight/price rows */
  .weight-price-row {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
  }

  .weightPriceOptions {
    padding: 10px;
  }


  /* Responsive */
  @media screen and (max-width: 400px) {
    .form .column {
      flex-wrap: wrap;
    }

    .container2 {
      padding: 10px;
      margin: 2px;
    }
  }
</style>
</body>

</html>